/*
 * Copyright (C) 2023 thevalidator
 */
package ru.thevalidator.tictactoe.gui;

import com.formdev.flatlaf.FlatDarkLaf;
import java.awt.Color;
import java.awt.Graphics;
import java.awt.Image;
import java.io.IOException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.imageio.ImageIO;
import static ru.thevalidator.tictactoe.gui.Settings.BOX_SIZE;
import static ru.thevalidator.tictactoe.gui.Settings.MAIN_WINDOW_HEIGHT;
import static ru.thevalidator.tictactoe.gui.Settings.MAIN_WINDOW_WIDTH;
import static ru.thevalidator.tictactoe.gui.Settings.MARGIN;
import ru.thevalidator.tictactoe.model.Board;
import ru.thevalidator.tictactoe.model.Role;

/**
 *
 * @author thevalidator
 */
public class MainWindow extends javax.swing.JFrame {

    private Board board;

    /**
     * Creates new form MainWindow
     */
    public MainWindow() {
        board = new Board();
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new GameBoardPanel(board);
        jPanel3 = new javax.swing.JPanel();
        jButton1 = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Tic-Tac-Toe");
        setPreferredSize(new java.awt.Dimension(MAIN_WINDOW_WIDTH, MAIN_WINDOW_HEIGHT));

        jPanel1.setBackground(new java.awt.Color(0, 102, 153));
        jPanel1.setPreferredSize(new java.awt.Dimension(MAIN_WINDOW_WIDTH, MAIN_WINDOW_HEIGHT));

        jPanel2.setPreferredSize(new java.awt.Dimension(MAIN_WINDOW_WIDTH - (MARGIN * 2), MAIN_WINDOW_WIDTH  - (MARGIN * 2)));
        jPanel2.addMouseListener((GameBoardPanel)jPanel2);

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 551, Short.MAX_VALUE)
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 444, Short.MAX_VALUE)
        );

        jButton1.setText("jButton1");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jLabel1.setText("jLabel1");

        jLabel2.setText("jLabel2");

        jLabel3.setText("jLabel3");

        jLabel4.setText("jLabel4");

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(25, 25, 25)
                .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(55, 55, 55)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGap(25, 25, 25)
                        .addComponent(jButton1))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGap(15, 15, 15)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel1)
                            .addComponent(jLabel3))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel2)
                            .addComponent(jLabel4))))
                .addContainerGap(21, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, 563, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, 536, Short.MAX_VALUE)
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        drawGrid();
        drawFigures();
    }//GEN-LAST:event_jButton1ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        FlatDarkLaf.setup();
        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> {
            new MainWindow().setVisible(true);
        });
    }

    public void drawGrid() {
//        try {
            Graphics panel = jPanel2.getGraphics();
            panel.setColor(Color.DARK_GRAY);
            for (int i = 1; i < 3; i++) {
                panel.fillRect((MAIN_WINDOW_WIDTH - (MARGIN * 2)) / 3 * i, MARGIN, MARGIN, MAIN_WINDOW_WIDTH - MARGIN * 4);
                panel.fillRect(MARGIN, (MAIN_WINDOW_WIDTH - (MARGIN * 2)) / 3 * i, MAIN_WINDOW_WIDTH - MARGIN * 4, MARGIN);
            }

//            Image cross = ImageIO.read(getClass().getClassLoader().getResource("icons/cross.png"));
//            Image circle = ImageIO.read(getClass().getClassLoader().getResource("icons/circle.png"));
//            Image crossWin = ImageIO.read(getClass().getClassLoader().getResource("icons/cross_WIN.png"));
//            Image circleWin = ImageIO.read(getClass().getClassLoader().getResource("icons/circle_WIN.png"));
//
//            System.out.println(">> " + cross.getHeight(null));
//            int imgSize = cross.getWidth(null);
//            int start = MARGIN + BOX_SIZE / 2 - imgSize / 2;
//            int offset = BOX_SIZE + MARGIN / 2;
//
//            int crossLineStart = BOX_SIZE / 2 + MARGIN;
//            int crossLineOffset = BOX_SIZE + MARGIN / 2;
//
//            System.out.println("start=" + start);
//
//            panel.drawImage(cross, start, start, null);
//            panel.drawImage(circle, start + offset, start + offset, null);
////            panel.drawImage(crossWin, 210, 40, null);
////            panel.drawImage(circleWin, 40, 210, null);
//
//            panel.drawImage(cross, start + offset, start + offset * 0, null);
//            panel.drawImage(cross, start + offset * 2, start + offset * 1, null);
//            panel.drawImage(cross, start + offset * 0, start + offset * 1, null);
//
//            panel.drawImage(circleWin, start + offset * 0, start + offset * 2, null);
//            panel.drawImage(circleWin, start + offset * 1, start + offset * 2, null);
//            panel.drawImage(circleWin, start + offset * 2, start + offset * 2, null);
//
//            //cross center horisontal
//            panel.drawLine(
//                    crossLineStart + crossLineOffset * 0, crossLineStart + crossLineOffset * 1,
//                    crossLineStart + crossLineOffset * 2, crossLineStart + crossLineOffset * 1);
//
//            //cross center vertical
//            panel.drawLine(
//                    crossLineStart + crossLineOffset * 1, crossLineStart + crossLineOffset * 0,
//                    crossLineStart + crossLineOffset * 1, crossLineStart + crossLineOffset * 2);
//
//            //cross diagonal left
//            panel.drawLine(
//                    crossLineStart + crossLineOffset * 0, crossLineStart + crossLineOffset * 0,
//                    crossLineStart + crossLineOffset * 2, crossLineStart + crossLineOffset * 2);
//
//            //cross diagonal right
//            panel.drawLine(
//                    crossLineStart + crossLineOffset * 0, crossLineStart + crossLineOffset * 2,
//                    crossLineStart + crossLineOffset * 2, crossLineStart + crossLineOffset * 0);
//
//        } catch (IOException ex) {
//            Logger.getLogger(MainWindow.class.getName()).log(Level.SEVERE, null, ex);
//        }
    }

    private void drawFigures() {
        try {
            Graphics panel = jPanel2.getGraphics();
            Image cross = ImageIO.read(getClass().getClassLoader().getResource("icons/cross.png"));
            Image circle = ImageIO.read(getClass().getClassLoader().getResource("icons/circle.png"));
            Image crossWin = ImageIO.read(getClass().getClassLoader().getResource("icons/cross_WIN.png"));
            Image circleWin = ImageIO.read(getClass().getClassLoader().getResource("icons/circle_WIN.png"));
            
            for (int y = 0; y < board.getVerticalSze(); y++) {
                for (int x = 0; x < board.getHorisontalSze(); x++) {
                    // TODO: win line draw
                    int value = board.getboxValue(x, y);
                    if (value == Role.CROSS.getValue()) {
                        drawFigure(cross, x, y);
                    } else if (value == Role.NOUGHT.getValue()) {
                        drawFigure(circle, x, y);
                    }
                }
            }
            

//            System.out.println(">> " + cross.getHeight(null));
//            int imgSize = cross.getWidth(null);
//            int start = MARGIN + BOX_SIZE / 2 - imgSize / 2;
//            int offset = BOX_SIZE + MARGIN / 2;
//
//            int crossLineStart = BOX_SIZE / 2 + MARGIN;
//            int crossLineOffset = BOX_SIZE + MARGIN / 2;
//
//            System.out.println("start=" + start);
//
//            panel.drawImage(cross, start, start, null);
//            panel.drawImage(circle, start + offset, start + offset, null);
//
//            panel.drawImage(cross, start + offset, start + offset * 0, null);
//            panel.drawImage(cross, start + offset * 2, start + offset * 1, null);
//            panel.drawImage(cross, start + offset * 0, start + offset * 1, null);
//
//            panel.drawImage(circleWin, start + offset * 0, start + offset * 2, null);
//            panel.drawImage(circleWin, start + offset * 1, start + offset * 2, null);
//            panel.drawImage(circleWin, start + offset * 2, start + offset * 2, null);
//
//            //cross center horisontal
//            panel.drawLine(
//                    crossLineStart + crossLineOffset * 0, crossLineStart + crossLineOffset * 1,
//                    crossLineStart + crossLineOffset * 2, crossLineStart + crossLineOffset * 1);
//
//            //cross center vertical
//            panel.drawLine(
//                    crossLineStart + crossLineOffset * 1, crossLineStart + crossLineOffset * 0,
//                    crossLineStart + crossLineOffset * 1, crossLineStart + crossLineOffset * 2);
//
//            //cross diagonal left
//            panel.drawLine(
//                    crossLineStart + crossLineOffset * 0, crossLineStart + crossLineOffset * 0,
//                    crossLineStart + crossLineOffset * 2, crossLineStart + crossLineOffset * 2);
//
//            //cross diagonal right
//            panel.drawLine(
//                    crossLineStart + crossLineOffset * 0, crossLineStart + crossLineOffset * 2,
//                    crossLineStart + crossLineOffset * 2, crossLineStart + crossLineOffset * 0);
        } catch (IOException ex) {
            Logger.getLogger(MainWindow.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    // End of variables declaration//GEN-END:variables

    private void drawFigure(Image figure, int x, int y) {
        Graphics panel = jPanel2.getGraphics();
        int imgSize = figure.getWidth(null);
        int start = MARGIN + BOX_SIZE / 2 - imgSize / 2;
        int offset = BOX_SIZE + MARGIN / 2;

        int crossLineStart = BOX_SIZE / 2 + MARGIN;
        int crossLineOffset = BOX_SIZE + MARGIN / 2;
        //panel.drawImage(figure, start + offset, start + offset * 0, null);
        //panel.drawImage(figure, start + offset * 2, start + offset * 1, null);
        panel.drawImage(figure, start + offset * x, start + offset * y, null);
    }

}
