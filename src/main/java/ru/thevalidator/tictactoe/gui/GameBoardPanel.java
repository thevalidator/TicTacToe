/*
 * Copyright (C) 2023 thevalidator
 */
package ru.thevalidator.tictactoe.gui;

import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import static ru.thevalidator.tictactoe.gui.Settings.MAIN_WINDOW_WIDTH;
import static ru.thevalidator.tictactoe.gui.Settings.MARGIN;
import ru.thevalidator.tictactoe.model.Board;
import ru.thevalidator.tictactoe.model.Role;

/**
 *
 * @author thevalidator
 */
public class GameBoardPanel extends javax.swing.JPanel implements MouseListener {

    private final Board board;

    /**
     * Creates new form GameBoardPanel
     *
     * @param board
     */
    public GameBoardPanel(Board board) {
        this.board = board;
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setBackground(new java.awt.Color(0, 153, 204));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

    private int getRowNumber(int y) {
        return y / (getSize().height / board.getVerticalSze());
    }

    private int getColumnNumber(int x) {
        return x / ((getSize().width / board.getHorisontalSze()));
    }

    @Override
    public void mouseClicked(MouseEvent e) {
        int xClickPos = e.getX();
        int yClickPos = e.getY();
        System.out.printf("x=%d y=%d\n", xClickPos, yClickPos);

        if (gamingAreaClicked(xClickPos, yClickPos)) {
            int x = getColumnNumber(xClickPos);
            int y = getRowNumber(yClickPos);
            System.out.printf("POINT[x=%d:y=%d] value=%d\n", x, y, board.getboxValue(x, y));
            if (board.getboxValue(x, y) == 0) {
                board.setBoxValue(x, y, Role.CROSS);
            }
            
            
        }

        
    }
    
    private boolean gamingAreaClicked(int x, int y) {
        // TODO: fix gaming area for grid lines (exclude lines area)
        boolean a = x >= MARGIN && x <= (MAIN_WINDOW_WIDTH - MARGIN);
        boolean b = y >= MARGIN && y <= (MAIN_WINDOW_WIDTH - MARGIN);
        return a && b;
    }

    @Override
    public void mousePressed(MouseEvent e) {
        //throw new UnsupportedOperationException("Not supported yet.");
    }

    @Override
    public void mouseReleased(MouseEvent e) {
        //throw new UnsupportedOperationException("Not supported yet.");
    }

    @Override
    public void mouseEntered(MouseEvent e) {
        //throw new UnsupportedOperationException("Not supported yet.");
    }

    @Override
    public void mouseExited(MouseEvent e) {
        //throw new UnsupportedOperationException("Not supported yet.");
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
}
